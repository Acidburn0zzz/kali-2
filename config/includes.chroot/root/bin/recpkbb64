#!/bin/bash

# Reconstructs a secret key from a paper key
# $1 = Paperkey (*.pkb.b64)
# $2 = Public key
# $3 = Output private key

# Check arguments
if [ -z $1 ] || [ -z $2 ] || [ -z $3 ]; then
   echo "Usage: $0 <*.pkb.b64> <key.pub.asc> <output>"
   exit 1
fi

# Load the keys
pkbb64=$1
pubasc=$2
secasc=$3

tmp=$pkb.tmp
pubgpg=$pubasc.gpg
secgpg=$secasc.gpg

# Define the base gpg call
gpgbase="gpg2 --no-default-keyring --keyring $pubring --secret-keyring $secring -z 9 --textmode"

# Define the temporary keyring
pwd=`pwd`
pubring=$pwd/pubring.tmp
secring=$pwd/secring.tmp

# Import the public key into a temporary keyring
$gpgbase --import $pubasc

# Dearmor the public key
$gpgbase --dearmor --output $pubgpg < $pubasc

# Reconstruct the paperkey
base64 -d $pkbb64 > $tmp

# Reconstruct the secret key
paperkey --pubring $pubgpg --secrets $tmp --output $secgpg

# Import the keys
$gpgbase --import $secgpg

# Armor the secret key
$gpgbase --armor --export-secret-key > $secasc

# Remove the temporary keyring
rm -f $pubring $pubring~ $secring $secring~

# Remove the dearmored public key
rm -f $pubgpg

# Remove the reconstructed paperkey
rm -f $tmp

# Remove the dearmored secret key
rm -f $secgpg


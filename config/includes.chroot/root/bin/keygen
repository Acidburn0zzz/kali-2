#!/bin/bash

# Generates a GPG keypair
# $1 = Passphrase

# Make sure an argument was passed in
if [ -z $1 ]; then
   echo "Usage: $0 <passphrase>"
   exit 1
fi

# Get a random id
id=`uuidgen -r | sha512sum | cut -c1-12`

# Define variables
passphrase=$1
pwd=`pwd`
key=key
dir=$pwd/$id
pubasc=$dir/$key.pub.asc
pubgpg=$dir/$key.pub.gpg
secasc=$dir/$key.sec.asc
secgpg=$dir/$key.sec.gpg
revasc=$dir/$key.rev.asc
pkt=$dir/$key.sec.pkt
pkbb64=$dir/$key.sec.pkb.b64
pubqr=$dir/$key.pub.asc.png
pkbqr=$dir/$key.sec.pkb.b64.png
revqr=$dir/$key.rev.asc.png
pubring=$dir/pubring.tmp
secring=$dir/secring.tmp
tarball=$pwd/$id.tgz

# Create the key directory
mkdir -p $dir

# Define the base gpg call
gpgbase="gpg2 --no-default-keyring --keyring $pubring --secret-keyring $secring -z 9"

# Generate a keypair (use gpg for this)
cat <<EOF | gpg --no-default-keyring --keyring $pubring --secret-keyring $secring -z 9 --gen-key --batch
%pubring $pubgpg
%secring $secgpg
Key-Type: RSA
Key-Length: 1024
Key-Usage: encrypt,sign,auth
Passphrase: $passphrase
Name-Real: $id
Preferences: AES SHA256 BZIP2
%commit
EOF

# Create a temporary keyring
$gpgbase --import $secgpg $pubgpg

# Create a revocation certificate (use gpg for this)
rm -f $revgpg
cat <<EOF | gpg --status-fd 2 --command-fd 0 --no-default-keyring --keyring $pubring --secret-keyring $secring -z 9 --gen-revoke --armor --output $revasc $id
y
0

y
$passphrase
EOF

# Armor the keys
$gpgbase --armor --export > $pubasc
$gpgbase --armor --export-secret-keys > $secasc

# Create paperkeys
paperkey --output-width 72 --secret-key $secgpg --output-type base16 | grep -v \# > $pkt
paperkey --secret-key $secgpg --output-type raw | base64 -w 72 > $pkbb64

# Create qr codes
qrencode -o $pubqr < $pubasc
qrencode -o $pkbqr < $pkbb64
qrencode -o $revqr < $revasc

# Tar together all the output files
tar czvf $tarball $id

# Remove the temporary keyring
rm -f $pubring $pubring~ $secring $secring~

